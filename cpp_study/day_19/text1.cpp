//
// Created by 20212 on 18/9/2024.
//
//全局变量，静态变量都放在数据段 静态区
//局部静态对象虽然生命周期是全局的，但是作用域只在局部当中进行使用

//全局变量和全局静态变量的区别 链接属性不一样 globalvar 所有文件中可见
//staticglobalvar 只在当前文件可见

//面试题 : 全局变量和静态变量的区别 链接属性不一样
//常量区 代码段 malloc出来的在堆上

//数据段 静态区 全局数据，静态数据
//代码段 常量区 可执行代码，只读常量

//操作系统内存管理
//1.分段 不同用途数据放到不同的区域
//2.分页

//指针是对虚拟内存的映射

//1，编写的代码是存在文件系统上的
//2.编译器去读这个程序，通过编译链接生成二进制可执行程序 a.out
//3./a.out 在一个终端下运行程序，相当于终端创建了一个子进程 然后进行替换

//int main() {
////    c函数
//    int *p1 = (int *) malloc(sizeof(int));
//    int *p3 = (int*) malloc(sizeof(int)*10);
//    free(p1);
//    free(p2);
////c++ 操作符
//    int *p2 = new int(10);//申请一个int4四个字节的空间，初始化为10
//    int* p4 = new int[10];//申请10个int的40个字节的空间
//    delete p2;
//    delete []p4;
//    return 0;
//}
//既然已经有个malloc和free，new和delete的意义
//1.对于上面内置类型，他们的效果是一样的
//2.对于自定义类型，效果不一样 A* p3 = (int*)malloc(sizeof(A));//申请空间
//A*p4 = new A;申请空间 + 初始化
//malloc只申请空间
//new 申请空间加构造函数初始化

//free 只释放空间
//delete 先调用析构函数，再释放空间